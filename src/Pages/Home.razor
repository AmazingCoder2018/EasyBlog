@inject HttpClient http
@inject SearchService searchService

@page "/"
@using System.Web

<div class="w-3/4 pr-4">
    <!-- 博客卡片列表 -->
    <div class="px-3 bg-white dark:bg-gray-900">
        <!-- 博客卡片内容 -->
        @foreach (var blog in blogs)
        {
            <div class="w-100 rounded overflow-hidden shadow-lg dark:bg-gray-800 my-2">
                <div class="px-6 py-3">
                    <div class="font-bold text-xl mb-2">
                        <a href="@UrlEncode(blog.Path)" target="_blank" class="block text-lg py-2 text-gray-600 hover:text-gray-800 dark:text-gray-300 dark:hover:text-gray-100">📑 @blog.Title</a>
                    </div>
                    <p class="text-gray-700 text-base dark:text-gray-300">
                        👨‍💻 @webInfo?.AuthorName
                        &nbsp;&nbsp;
                        ⏱️ @FormatDatetime(blog.PublishTime)
                    </p>
                </div>
            </div>
        }
    </div>
</div>

<div class="w-1/4 mt-1">
    <!-- 分类 -->
    <div class="rounded-lg shadow-md p-4 dark:bg-gray-800">
        <!-- lenged titile -->
        <div class="text-xl font-semibold dark:text-gray-300">分类</div>

        <span href="#" class="text-lg block py-2 text-gray-600 hover:text-gray-800 dark:text-gray-300 dark:hover:text-gray-100" @onclick="e=>FilterBlogs(null,null)">
            全部 [@allBlogs.Count]
        </span>
        @foreach (var catalog in catalogs)
        {
            <span href="#" class="text-lg block py-2 text-gray-600 hover:text-gray-800 dark:text-gray-300 dark:hover:text-gray-100" @onclick="e=>FilterBlogs(catalog.Name,null)">
                @catalog.Name [@catalog.Blogs.Count]
            </span>
        }
    </div>
    <div class="rounded-lg shadow-md p-4 dark:bg-gray-800 mt-2">
        <!-- lenged titile -->
        <div class="text-xl font-semibold dark:text-gray-300">存档</div>

        <span href="#" class="text-lg block py-2 text-gray-600 hover:text-gray-800 dark:text-gray-300 dark:hover:text-gray-100" @onclick="e=>FilterBlogs(null,null)">
            全部 [@allBlogs.Count]
        </span>
        @foreach (var date in dates)
        {
            <span href="#" class="text-lg block py-2 text-gray-600 hover:text-gray-800 dark:text-gray-300 dark:hover:text-gray-100" @onclick="e=>FilterBlogs(null,date)">
                @date.ToString("yyyy-MM-dd") [@GetCountByDate(date)]
            </span>
        }
    </div>
</div>


@code {
    private WebInfo? webInfo = null;
    private List<Blog> allBlogs = [];
    private List<Blog> blogs = [];
    private List<Catalog> catalogs = [];

    List<DateTimeOffset> dates = [];
    public string? SearchText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var data = await http.GetFromJsonAsync<Catalog>("data/blogs.json");

        catalogs = data?.Children.ToList() ?? [];
        allBlogs = data?.GetAllBlogs().OrderByDescending(b => b.PublishTime).ToList() ?? [];
        blogs = allBlogs?.Take(50).ToList() ?? [];
        webInfo = await http.GetFromJsonAsync<WebInfo>("data/webinfo.json") ?? new WebInfo();

        dates = allBlogs!.Select(b => b.PublishTime)
            .OrderByDescending(b => b)
            .DistinctBy(b => b.Date)
            .ToList();

        searchService.OnSearch = Search;
    }

    private int GetCountByDate(DateTimeOffset date)
    {
        return allBlogs.Count(b => b.PublishTime.Date == date.Date);
    }

    private void Search(string? key)
    {
        if (string.IsNullOrWhiteSpace(key))
        {
            blogs = allBlogs;
        }
        else
        {
            blogs = allBlogs.Where(b => b.Title.ToLower().Contains(key.ToLower())).ToList();
        }

        StateHasChanged();
    }

    /// <summary>
    /// 筛选博客
    /// </summary>
    private void FilterBlogs(string? catalogName, DateTimeOffset? date)
    {
        if (catalogName != null)
        {
            var catalog = catalogs.FirstOrDefault(c => c.Name == catalogName);
            blogs = catalog?.Blogs.ToList() ?? [];
        }
        else if (date != null)
        {
            blogs = allBlogs.Where(b => b.PublishTime.Date == date.Value.Date).ToList();
        }
        else
        {
            blogs = allBlogs;
        }
    }

    private string UrlEncode(string path)
    {
        return "/blogs" + path;
    }

    private string FormatDatetime(DateTimeOffset dateTime)
    {
        TimeSpan timeDifference = DateTimeOffset.Now - dateTime;
        return timeDifference.Humanize();
    }
}